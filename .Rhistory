print()
allMetrics <- perform7 %>%
rename(MAE_lme_7d = MAE
, CP_lme_7d = CP) %>%
left_join(perform14
, by = "city"
) %>%
rename(MAE_lme_14d = MAE
, CP_lme_14d = CP)
Designmat <- model.matrix(formula(model)[-2], train)
predvar <- diag(Designmat %*% vcov(model) %*% t(Designmat))
plotDF <- train %>%
select(city, day031620, case.rate) %>%
mutate(city = as.character(city)
, SE2 = sqrt(predvar + model$sigma^2)
, upperCI.fitted = case.rate + 1.96*SE2
, lowerCI.fitted = case.rate - 1.96*SE2
, fitted = predict(model, data = train)
) %>%
reshape::melt(id = c('city', 'day031620')) %>%
# bring into forecasted case rates
rbind(results7 %>%
select(city, day031620, case.rate, pred, SE2) %>%
#rename(case.rate = pred) %>%
mutate(upperCI.pred = pred + 1.96*SE2
, lowerCI.pred = pred - 1.96*SE2
) %>%
reshape2::melt(id = c('city', 'day031620'))
)
p <- ggplot(plotDF
, aes(day031620, value, group = variable, colour = variable)) +
geom_line(data = filter(plotDF, variable == 'case.rate'), linetype = "solid", color = 'black', alpha = 0.6) +
geom_line(data = filter(plotDF, variable == 'fitted'), linetype = "solid", color = 'red') +
geom_line(data = filter(plotDF, variable == 'pred'), linetype = "dashed", color = 'blue') +
# uncertainty band for fitted model
geom_ribbon(data = filter(plotDF, variable == 'lowerCI.fitted')
, aes(ymin = filter(plotDF, variable == 'lowerCI.fitted')$value
, ymax =  filter(plotDF, variable == 'upperCI.fitted')$value
)
, alpha = 0.3
, color = NA
, fill = "red") +
# prediction band for forecast
geom_ribbon(data = filter(plotDF, variable == 'lowerCI.pred')
, aes(ymin = filter(plotDF, variable == 'lowerCI.pred')$value
, ymax =  filter(plotDF, variable == 'upperCI.pred')$value
)
, alpha = 0.3
, color = NA
, fill = "blue") +
facet_wrap(. ~ city, ncol = 2) +
ggtitle('Forecast 7 Days') +
ylab('Case Rate per 100,000 People') +
xlab('Days since March 16, 2020') +
ylim(-15,100) +
# add performance metrics
geom_label(data = perform7 %>% mutate(MAE = paste0("MAE = ", MAE))
, aes(label = MAE),
x = 0, y = 100, hjust="inward", vjust="inward",
inherit.aes = FALSE) +
geom_label(data = perform7 %>% mutate(CP = paste0("CP = ", CP))
, aes(label = CP),
x = 0, y = 80, hjust="inward", vjust="inward",
inherit.aes = FALSE) +
theme_classic() +
theme(legend.position = 'none')
p
plotDF <- train %>%
select(city, day031620, case.rate) %>%
mutate(city = as.character(city)
, SE2 = sqrt(predvar + model$sigma^2)
, upperCI.fitted = case.rate + 1.96*SE2
, lowerCI.fitted = case.rate - 1.96*SE2
, fitted = predict(model, data = train)
) %>%
reshape::melt(id = c('city', 'day031620')) %>%
# bring into forecasted case rates
rbind(results14 %>%
select(city, day031620, case.rate, pred, SE2) %>%
#rename(case.rate = pred) %>%
mutate(upperCI.pred = pred + 1.96*SE2
, lowerCI.pred = pred - 1.96*SE2
) %>%
reshape2::melt(id = c('city', 'day031620'))
)
p <- ggplot(plotDF
, aes(day031620, value, group = variable, colour = variable)) +
geom_line(data = filter(plotDF, variable == 'case.rate'), linetype = "solid", color = 'black', alpha = 0.6) +
geom_line(data = filter(plotDF, variable == 'fitted'), linetype = "solid", color = 'red') +
geom_line(data = filter(plotDF, variable == 'pred'), linetype = "dashed", color = 'blue') +
# uncertainty band for fitted model
geom_ribbon(data = filter(plotDF, variable == 'lowerCI.fitted')
, aes(ymin = filter(plotDF, variable == 'lowerCI.fitted')$value
, ymax =  filter(plotDF, variable == 'upperCI.fitted')$value
)
, alpha = 0.2, color = NA
, fill = "red") +
# prediction band for forecast
geom_ribbon(data = filter(plotDF, variable == 'lowerCI.pred')
, aes(ymin = filter(plotDF, variable == 'lowerCI.pred')$value
, ymax =  filter(plotDF, variable == 'upperCI.pred')$value
)
, alpha = 0.2, color = NA
, fill = "blue") +
facet_wrap(. ~ city, ncol = 2) +
ggtitle('Forecast 14 Days') +
ylab('Case Rate per 100,000 People') +
xlab('Days since March 16, 2020') +
ylim(-15,100) +
# add performance metrics
geom_label(data = perform14 %>% mutate(MAE = paste0("MAE = ", MAE))
, aes(label = MAE),
x = 0, y = 100, hjust="inward", vjust="inward",
inherit.aes = FALSE) +
geom_label(data = perform14 %>% mutate(CP = paste0("CP = ", CP))
, aes(label = CP),
x = 0, y = 80, hjust="inward", vjust="inward",
inherit.aes = FALSE) +
theme_classic() +
theme(legend.position = 'none')
p
case.rate.lme20201031.reweighed <-
lme(fixed = case.rate ~ casesTminus1.rate + casesTminus2.rate + weekend
, random = ~ casesTminus1.rate + casesTminus2.rate - 1 | city
, data = train
, weights = varPower(form = ~ fitted(.))
, control = lmeControl(maxIter = 1e4)
)
summary(case.rate.lme20201031.reweighed)
model <- case.rate.lme20201031.reweighed
results7 <- test7 %>%
select(city, day031620, case.rate, casesTminus1.rate, casesTminus2.rate, weekend)
results7$pred <- predict(model, newdata = results7)
Designmat <- model.matrix(formula(model)[-2], results7)
predvar <- diag(Designmat %*% vcov(model) %*% t(Designmat))
results7$SE <- sqrt(predvar)
results7$SE2 <- sqrt(predvar + model$sigma^2)
results14 <- test14 %>%
select(city, day031620, case.rate, casesTminus1.rate, casesTminus2.rate, weekend)
results14$pred <- predict(model, newdata = results14)
Designmat <- model.matrix(formula(model)[-2], results14)
predvar <- diag(Designmat %*% vcov(model) %*% t(Designmat))
results14$SE <- sqrt(predvar)
results14$SE2 <- sqrt(predvar + model$sigma^2)
results7 %>%
group_by(city) %>%
summarize(MAE = round(mean(abs(case.rate - pred)) , 2)
, CP = round(sum(case.rate >= (pred - 1.96*SE2) & case.rate <= (pred + 1.96*SE2) ) / n() , 2)
) %>%
as.data.frame() %>%
print()
results14 %>%
group_by(city) %>%
summarize(MAE = round(mean(abs(case.rate - pred)) , 2)
, CP = round(sum(case.rate >= (pred - 1.96*SE2) & case.rate <= (pred + 1.96*SE2) ) / n() , 2)
) %>%
as.data.frame() %>%
print()
allMetrics %<>% left_join(perform7
, by = "city"
) %>%
rename(MAE_lmeWeighted_7d = MAE
, CP_lmeWeighted_7d = CP) %>%
left_join(perform14
, by = "city"
) %>%
rename(MAE_lmeWeighted_14d = MAE
, CP_lmeWeighted_14d = CP)
Designmat <- model.matrix(formula(model)[-2], train)
predvar <- diag(Designmat %*% vcov(model) %*% t(Designmat))
plotDF <- train %>%
select(city, day031620, case.rate) %>%
mutate(city = as.character(city)
, SE2 = sqrt(predvar + model$sigma^2)
, upperCI.fitted = case.rate + 1.96*SE2
, lowerCI.fitted = case.rate - 1.96*SE2
, fitted = predict(model, data = train)
) %>%
reshape::melt(id = c('city', 'day031620')) %>%
# bring into forecasted case rates
rbind(results7 %>%
select(city, day031620, case.rate, pred, SE2) %>%
#rename(case.rate = pred) %>%
mutate(upperCI.pred = pred + 1.96*SE2
, lowerCI.pred = pred - 1.96*SE2
) %>%
reshape2::melt(id = c('city', 'day031620'))
)
p <- ggplot(plotDF
, aes(day031620, value, group = variable, colour = variable)) +
geom_line(data = filter(plotDF, variable == 'case.rate'), linetype = "solid", color = 'black', alpha = 0.6) +
geom_line(data = filter(plotDF, variable == 'fitted'), linetype = "solid", color = 'red') +
geom_line(data = filter(plotDF, variable == 'pred'), linetype = "dashed", color = 'blue') +
# uncertainty band for fitted model
geom_ribbon(data = filter(plotDF, variable == 'lowerCI.fitted')
, aes(ymin = filter(plotDF, variable == 'lowerCI.fitted')$value
, ymax =  filter(plotDF, variable == 'upperCI.fitted')$value
)
, alpha = 0.4, color = NA
, fill = "red") +
# prediction band for forecast
geom_ribbon(data = filter(plotDF, variable == 'lowerCI.pred')
, aes(ymin = filter(plotDF, variable == 'lowerCI.pred')$value
, ymax =  filter(plotDF, variable == 'upperCI.pred')$value
)
, alpha = 0.4, color = NA
, fill = "blue") +
facet_wrap(. ~ city, ncol = 2) +
ggtitle('Forecast 7 Days') +
ylab('Case Rate per 100,000 People') +
xlab('Days since March 16, 2020') +
ylim(-15,100) +
# add performance metrics
geom_label(data = perform7 %>% mutate(MAE = paste0("MAE = ", MAE))
, aes(label = MAE),
x = 0, y = 100, hjust="inward", vjust="inward",
inherit.aes = FALSE) +
geom_label(data = perform7 %>% mutate(CP = paste0("CP = ", CP))
, aes(label = CP),
x = 0, y = 80, hjust="inward", vjust="inward",
inherit.aes = FALSE) +
theme_classic() +
theme(legend.position = 'none')
p
plotDF <- train %>%
select(city, day031620, case.rate) %>%
mutate(city = as.character(city)
, SE2 = sqrt(predvar + model$sigma^2)
, upperCI.fitted = case.rate + 1.96*SE2
, lowerCI.fitted = case.rate - 1.96*SE2
, fitted = predict(model, data = train)
) %>%
reshape::melt(id = c('city', 'day031620')) %>%
# bring into forecasted case rates
rbind(results14 %>%
select(city, day031620, case.rate, pred, SE2) %>%
#rename(case.rate = pred) %>%
mutate(upperCI.pred = pred + 1.96*SE2
, lowerCI.pred = pred - 1.96*SE2
) %>%
reshape2::melt(id = c('city', 'day031620'))
)
p <- ggplot(plotDF
, aes(day031620, value, group = variable, colour = variable)) +
geom_line(data = filter(plotDF, variable == 'case.rate'), linetype = "solid", color = 'black', alpha = 0.6) +
geom_line(data = filter(plotDF, variable == 'fitted'), linetype = "solid", color = 'red') +
geom_line(data = filter(plotDF, variable == 'pred'), linetype = "dashed", color = 'blue') +
# uncertainty band for fitted model
geom_ribbon(data = filter(plotDF, variable == 'lowerCI.fitted')
, aes(ymin = filter(plotDF, variable == 'lowerCI.fitted')$value
, ymax =  filter(plotDF, variable == 'upperCI.fitted')$value
)
, alpha = 0.4, color = NA
, fill = "red") +
# prediction band for forecast
geom_ribbon(data = filter(plotDF, variable == 'lowerCI.pred')
, aes(ymin = filter(plotDF, variable == 'lowerCI.pred')$value
, ymax =  filter(plotDF, variable == 'upperCI.pred')$value
)
, alpha = 0.4, color = NA
, fill = "blue") +
facet_wrap(. ~ city, ncol = 2) +
ggtitle('Forecast 14 Days') +
ylab('Case Rate per 100,000 People') +
xlab('Days since March 16, 2020') +
ylim(-15,100) +
# add performance metrics
geom_label(data = perform14 %>% mutate(MAE = paste0("MAE = ", MAE))
, aes(label = MAE),
x = 0, y = 100, hjust="inward", vjust="inward",
inherit.aes = FALSE) +
geom_label(data = perform14 %>% mutate(CP = paste0("CP = ", CP))
, aes(label = CP),
x = 0, y = 80, hjust="inward", vjust="inward",
inherit.aes = FALSE) +
theme_classic() +
theme(legend.position = 'none')
p
case.rate.lm <-
lm( case.rate ~ casesTminus1.rate + casesTminus2.rate + weekend
, data = train
)
summary(case.rate.lm)
model <- case.rate.lm
results7 <- test7 %>% select(city, day031620, case.rate, casesTminus1.rate, casesTminus2.rate, weekend)
pred <- predict(model, newdata = results7, interval = "prediction", level = 0.95) %>% as.data.frame()
results7$pred <- pred$fit
results7$upperCI <- pred$upr
results7$lowerCI <- pred$lwr
results14 <- test14 %>% select(city, day031620, case.rate, casesTminus1.rate, casesTminus2.rate, weekend)
pred <- predict(model, newdata = results14, interval = "prediction", level = 0.95) %>% as.data.frame()
results14$pred <- pred$fit
results14$upperCI <- pred$upr
results14$lowerCI <- pred$lwr
results7 %>%
group_by(city) %>%
summarize(MAE = round(mean(abs(case.rate - pred)) , 2)
, CP = round(sum(case.rate >= lowerCI & case.rate <= upperCI ) / n() , 2)
) %>%
as.data.frame() %>%
print()
results14 %>%
group_by(city) %>%
summarize(MAE = round(mean(abs(case.rate - pred)) , 2)
, CP = round(sum(case.rate >= lowerCI & case.rate <= upperCI ) / n() , 2)
) %>%
as.data.frame() %>%
print()
allMetrics %<>% left_join(perform7
, by = "city"
) %>%
rename(MAE_lmeWeighted_7d = MAE
, CP_lmeWeighted_7d = CP) %>%
left_join(perform14
, by = "city"
) %>%
rename(MAE_lmeWeighted_14d = MAE
, CP_lmeWeighted_14d = CP)
allMetrics %>%
select(starts_with('MAE')) %>%
as.data.frame() %>%
print()
allMetrics %>%
select(city, starts_with('MAE')) %>%
mutate(best7d = apply(.[,c(2,4,6)], 1, function(x) names(x)[which.min(x)])
) %>%
as.data.frame() %>%
print()
allMetrics %>%
select(city, starts_with('MAE')) %>%
mutate(best7d = apply(.[,2:4], 1, function(x) names(x)[which.min(x)])
) %>%
as.data.frame() %>%
print()
allMetrics %>%
select(city, starts_with('MAE')) %>%
mutate(best7d = apply(.[,c(2,4,6)], 1, function(x) names(x)[which.min(x)])
) %>%
as.data.frame() %>%
print()
allMetrics %>%
select(city, starts_with('MAE')) %>%
mutate(best7d = apply(.[,2,4,6], 1, function(x) names(x)[which.min(x)])
) %>%
as.data.frame() %>%
print()
allMetrics %>%
select(city, starts_with('MAE')) %>%
mutate(best7d = apply(.[,seq(2,6,2)], 1, function(x) names(x)[which.min(x)])
) %>%
as.data.frame() %>%
print()
seq(2,6,2)
allMetrics %>%
select(city, starts_with('MAE')) %>%
mutate(best7d = apply(.[c(2,4,6)], 1, function(x) names(x)[which.min(x)])
) %>%
as.data.frame() %>%
print()
allMetrics %>%
select(city, starts_with('MAE')) %>%
mutate(best7d = apply(.[2,4,6], 1, function(x) names(x)[which.min(x)])
) %>%
as.data.frame() %>%
print()
allMetrics %>%
select(city, starts_with('MAE')) %>%
mutate(best7d = apply(.[,[c(2,4,6)]], 1, function(x) names(x)[which.min(x)])
allMetrics %>%
select(city, starts_with('MAE')) %>%
mutate(best7d = apply(.[[c(2,4,6)]], 1, function(x) names(x)[which.min(x)])
) %>%
as.data.frame() %>%
print()
allMetrics[,c(2,4,6)]
allMetrics %>%
select(city, starts_with('MAE')) %>%
mutate(best7d = apply(.[c(2,4,6)], 1, function(x) names(x)[which.min(x)])
) %>%
as.data.frame() %>%
print()
allMetrics %>%
select(city, starts_with('MAE')) %>%
mutate(best7d = apply(.[.2:6], 1, function(x) names(x)[which.min(x)])
) %>%
as.data.frame() %>%
print()
allMetrics %>%
select(city, starts_with('MAE')) %>%
mutate(best7d = apply(.[.2:6[c(1,2,4)]], 1, function(x) names(x)[which.min(x)])
) %>%
as.data.frame() %>%
print()
allMetrics %>%
select(city, starts_with('MAE')) %>%
mutate(best7d = apply(.[,2:6[c(1,2,4)]], 1, function(x) names(x)[which.min(x)])
) %>%
as.data.frame() %>%
print()
2:6[c(1,2,4)]
2:6
allMetrics %>%
select(city, starts_with('MAE')) %>%
mutate(best7d = apply(.[2:6], 1, function(x) names(x)[which.min(x)])
) %>%
as.data.frame() %>%
print()
allMetrics %>%
select(city, starts_with('MAE')) %>%
mutate(best7d = apply(.[,2:6], 1, function(x) names(x)[which.min(x)])
) %>%
as.data.frame() %>%
print()
allMetrics %>%
select(city, starts_with('MAE')) %>%
mutate(best7d = apply(.[,2:6], 1, function(x) names(x)[which.min(x)])
) %>%
as.data.frame() %>%
print()
allMetrics %>%
select(city, starts_with('MAE')) %>%
mutate(best7d = apply(.[,2:4], 1, function(x) names(x)[which.min(x)])
) %>%
as.data.frame() %>%
print()
allMetrics %>%
select(city, starts_with('MAE')) %>%
mutate(best7d = apply(.[,2:6], 1, function(x) names(x)[which.min(x)])
) %>%
as.data.frame() %>%
print()
View(allMetrics)
allMetrics %>%
select(city, starts_with('MAE')) %>%
mutate(best7d = apply(.[,2:9], 1, function(x) names(x)[which.min(x)])
) %>%
as.data.frame() %>%
print()
allMetrics %>%
select(city, starts_with('MAE')) %>%
mutate(best7d = apply(select(1:3), 1, function(x) names(x)[which.min(x)])
) %>%
as.data.frame() %>%
print()
library(tidyverse)
library(readxl)
perm <- read_excel('/Users/kentran/Documents/jobSearch/salaryH1BPerm/PERM_Disclosure_Data_FY2019.xlsx')
h1b <- read_excel('/Users/kentran/Documents/jobSearch/salaryH1BPerm/H-1B_Disclosure_Data_FY2019.xlsx')
perm %>% filter(str_detect(EMPLOYER_NAME, 'PUBLIC HEALTH')) %>%
select(EMPLOYER_NAME
, JOB_INFO_JOB_TITLE
, JOB_INFO_WORK_CITY
, WAGE_OFFERED_FROM_9089) %>%
as.data.frame()
h1b %>% filter(str_detect(EMPLOYER_NAME, 'PUBLIC HEALTH')) %>%
select(EMPLOYER_NAME
, JOB_TITLE
, EMPLOYER_CITY
, WAGE_RATE_OF_PAY_FROM_1) %>%
as.data.frame()
h1b %>% filter(str_detect(EMPLOYER_NAME, 'PUBLIC HEALTH INSTITUTE')) %>%
select(EMPLOYER_NAME
, JOB_TITLE
, EMPLOYER_CITY
, WAGE_RATE_OF_PAY_FROM_1) %>%
as.data.frame()
perm %>% filter(str_detect(EMPLOYER_NAME, 'PUBLIC HEALTH INSTITUTE ')) %>%
select(EMPLOYER_NAME
, JOB_INFO_JOB_TITLE
, JOB_INFO_WORK_CITY
, WAGE_OFFERED_FROM_9089) %>%
as.data.frame()
company <-
perm %>% filter(str_detect(EMPLOYER_NAME, 'PUBLIC HEALTH INSTITUTE')) %>%
select(EMPLOYER_NAME
, JOB_INFO_JOB_TITLE
, JOB_INFO_WORK_CITY
, WAGE_OFFERED_FROM_9089) %>%
as.data.frame()
company <- 'SOCIAL POLICY RESEARCH'
perm %>% filter(str_detect(EMPLOYER_NAME, company)) %>%
select(EMPLOYER_NAME
, JOB_INFO_JOB_TITLE
, JOB_INFO_WORK_CITY
, WAGE_OFFERED_FROM_9089) %>%
as.data.frame()
h1b %>% filter(str_detect(EMPLOYER_NAME, company)) %>%
select(EMPLOYER_NAME
, JOB_TITLE
, EMPLOYER_CITY
, WAGE_RATE_OF_PAY_FROM_1) %>%
as.data.frame()
company <- 'MATHEMATICA POLICY'
perm %>% filter(str_detect(EMPLOYER_NAME, company)) %>%
select(EMPLOYER_NAME
, JOB_INFO_JOB_TITLE
, JOB_INFO_WORK_CITY
, WAGE_OFFERED_FROM_9089) %>%
as.data.frame()
company <- 'MATHEMATICA'
perm %>% filter(str_detect(EMPLOYER_NAME, company)) %>%
select(EMPLOYER_NAME
, JOB_INFO_JOB_TITLE
, JOB_INFO_WORK_CITY
, WAGE_OFFERED_FROM_9089) %>%
as.data.frame()
h1b %>% filter(str_detect(EMPLOYER_NAME, company)) %>%
select(EMPLOYER_NAME
, JOB_TITLE
, EMPLOYER_CITY
, WAGE_RATE_OF_PAY_FROM_1) %>%
as.data.frame()
