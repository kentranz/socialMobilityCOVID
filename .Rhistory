casesTminus1.rate = case_when( mod(as.numeric(as.Date(date) - cutOff), 7) == 1 ~ casesTminus1.rate
, TRUE ~ as.numeric(NA))
, casesTminus2.rate =
case_when( mod(as.numeric(as.Date(date) - cutOff), 7) %in% c(1,2) ~ casesTminus2.rate
, TRUE ~ as.numeric(NA))
)
# Predict one new observation at a time
# For each new test, refit the model with actual observed Y
for (i in 1:testRange)
{
if(i >1 & i %% 7 == 1) # update only when predicting on 8th, 15th, etc. days
{
train <- alldata.groupedR %>%
filter(as.Date(date) >= startDate & as.Date(date) <= (cutOff - 1 + i))
model <- update(model, data = train)
}
# test to check correct training window
# print(i)
# print(max(as.Date(train$date)))
# filter test set to calculate pred for only 1 day at a time
tempTest <- test %>% filter(as.Date(date) == cutOff + i)
tempTest$pred <- predict(model, newdata = tempTest)
# test to check for correct test window
# print(max(as.Date(tempTest$date)))
# create design matrix
# [-2] drops response from formula
Designmat <- model.matrix(formula(model)[-2], tempTest)
# compute XVX′ to get the variance-covariance matrix of the predictions
# extract the diagonal of this matrix to get variances of predictions
predvar <- diag(Designmat %*% vcov(model) %*% t(Designmat))
#results7$SE <- sqrt(predvar)
tempTest$SE <- sqrt(predvar + model$sigma^2) # sigma is the estimated within-group error standard deviation
tempTest$lowerCI <- tempTest$pred - 1.96*tempTest$SE
tempTest$upperCI <- tempTest$pred + 1.96*tempTest$SE
test %<>%
left_join(tempTest %>% select(city, date, pred, lowerCI, upperCI)
, by = c("date" = "date", "city" = "city"))
if(i > 1)
{
test %<>%
mutate(pred = coalesce(pred.x, pred.y)
, lowerCI = coalesce(lowerCI.x, lowerCI.y)
, upperCI = coalesce(upperCI.x, upperCI.y)
) %>%
select(-pred.x, -pred.y
, -lowerCI.x, -lowerCI.y
, -upperCI.x, -upperCI.y)
}
# bring forward predictions
test %<>%
mutate(casesTminus1.rate =  case_when(is.na(casesTminus1.rate) ~ lag(as.numeric(pred)), TRUE ~ casesTminus1.rate)
, casesTminus2.rate =  case_when(is.na(casesTminus2.rate) ~ lag(as.numeric(pred), 2), TRUE ~ casesTminus2.rate)
)
}
# pull all metrics into one dataframe called dailyMetrics
metrics <- test %>%
filter(as.Date(date) <= cutOff + 7) %>%
group_by(city) %>%
summarize(MAE = round(mean(abs(case.rate - pred)) , 2)
, MAPE = round(mean(abs(case.rate - pred)/case.rate) , 2)
, CP = round(sum(case.rate >= lowerCI & case.rate <= upperCI ) / n() , 2)
) %>%
left_join( test %>%
group_by(city) %>%
summarize(MAE = round(mean(abs(case.rate - pred)) , 2)
, MAPE = round(mean(abs(case.rate - pred)/case.rate) , 2)
, CP = round(sum(case.rate >= lowerCI & case.rate <= upperCI ) / n() , 2)
)
, by = "city"
, suffix = c("_7d", "_14d")
) %>%
rename_at(vars(-city), ~ paste0(modelName,.)) %>%
arrange(as.character(city))
dailyMetrics %<>%
left_join(metrics, by = "city")
testNov %<>%
left_join(test %>% select(city, date, pred, lowerCI, upperCI), by = c("city", "date") ) %>%
rename_at(vars(pred, lowerCI, upperCI), ~paste0(modelName, .))
modelName <- 'lmWalkingNov_'
train <- alldata.groupedR %>%
filter(as.Date(date) >= startDate & as.Date(date) <= (cutOff))
model <- lm(case.rate ~ casesTminus1.rate + casesTminus2.rate + weekend + walkingMinus7,
data = train
)
summary(model)
test <- alldata.groupedR %>%
filter(as.Date(date) >= startDate
& as.Date(date) > cutOff
& as.Date(date) <= (cutOff + testRange)
) %>%
select(city, day031620, date, weekend, case.rate, casesTminus1.rate, casesTminus2.rate, walkingMinus7) %>%
mutate(
casesTminus1.rate = case_when( mod(as.numeric(as.Date(date) - cutOff), 7) == 1 ~ casesTminus1.rate
, TRUE ~ as.numeric(NA))
, casesTminus2.rate =
case_when( mod(as.numeric(as.Date(date) - cutOff), 7) %in% c(1,2) ~ casesTminus2.rate
, TRUE ~ as.numeric(NA))
)
for (i in 1:testRange)
{
if(i >1 & i %% 7 == 1) # update only when predicting on 8th, 15th, etc. days
{
train <- alldata.groupedR %>%
filter(as.Date(date) >= startDate & as.Date(date) <= (cutOff - 1 + i))
model <- update(model, data = train)
}
tempTest <- test %>% filter(as.Date(date) == cutOff + i)
pred <- predict(model, newdata = test[i,], interval = "prediction", level = 0.95) %>% as.data.frame()
tempTest$pred <- pred$fit
tempTest$lowerCI <- pred$lwr
tempTest$upperCI <- pred$upr
test %<>%
left_join(tempTest %>% select(city, date, pred, lowerCI, upperCI)
, by = c("date" = "date", "city" = "city"))
if(i > 1)
{
test %<>%
mutate(pred = coalesce(pred.x, pred.y)
, lowerCI = coalesce(lowerCI.x, lowerCI.y)
, upperCI = coalesce(upperCI.x, upperCI.y)
) %>%
select(-pred.x, -pred.y
, -lowerCI.x, -lowerCI.y
, -upperCI.x, -upperCI.y)
}
# bring forward predictions
test %<>%
mutate(casesTminus1.rate =  case_when(is.na(casesTminus1.rate) ~ lag(as.numeric(pred)), TRUE ~ casesTminus1.rate)
, casesTminus2.rate =  case_when(is.na(casesTminus2.rate) ~ lag(as.numeric(pred), 2), TRUE ~ casesTminus2.rate)
)
}
metrics <- test %>%
filter(as.Date(date) <= cutOff + 7) %>%
group_by(city) %>%
summarize(MAE = round(mean(abs(case.rate - pred)) , 2)
, MAPE = round(mean(abs(case.rate - pred)/case.rate) , 2)
, CP = round(sum(case.rate >= lowerCI & case.rate <= upperCI ) / n() , 2)
) %>%
left_join( test %>%
group_by(city) %>%
summarize(MAE = round(mean(abs(case.rate - pred)) , 2)
, MAPE = round(mean(abs(case.rate - pred)/case.rate) , 2)
, CP = round(sum(case.rate >= lowerCI & case.rate <= upperCI ) / n() , 2)
)
, by = "city"
, suffix = c("_7d", "_14d")
) %>%
rename_at(vars(-city), ~ paste0(modelName,.)) %>%
arrange(as.character(city))
dailyMetrics %<>%
left_join(metrics, by = "city")
testNov %<>%
left_join(test %>% select(city, date, pred, lowerCI, upperCI), by = c("city", "date") ) %>%
rename_at(vars(pred, lowerCI, upperCI), ~paste0(modelName, .))
modelName = 'lmeLogNov_'
train <- alldata.groupedR %>%
filter(as.Date(date) >= startDate & as.Date(date) <= (cutOff))
model <- lme(fixed = log(case.rate) ~ log(casesTminus1.rate) + log(casesTminus2.rate) + weekend,
random = ~ log(casesTminus1.rate) + log(casesTminus2.rate) - 1 | city,
data = train
, control = lmeControl(maxIter = 1e8, opt='optim')
)
summary(model)
# test to hold all date data points up to testRange
test <- alldata.groupedR %>%
filter(as.Date(date) >= startDate
& as.Date(date) > cutOff
& as.Date(date) <= (cutOff + testRange)
) %>%
select(city, day031620, date, weekend, case.rate, casesTminus1.rate, casesTminus2.rate) %>%
mutate(
casesTminus1.rate = case_when( mod(as.numeric(as.Date(date) - cutOff), 7) == 1 ~ casesTminus1.rate
, TRUE ~ as.numeric(NA))
, casesTminus2.rate =
case_when( mod(as.numeric(as.Date(date) - cutOff), 7) %in% c(1,2) ~ casesTminus2.rate
, TRUE ~ as.numeric(NA))
)
# Predict one new observation at a time
# For each new test, refit the model with actual observed Y
for (i in 1:testRange)
{
if(i >1 & i %% 7 == 1) # update only when predicting on 8th, 15th, etc. days
{
train <- alldata.groupedR %>%
filter(as.Date(date) >= startDate & as.Date(date) <= (cutOff - 1 + i))
model <- update(model, data = train)
}
# test to check correct training window
# print(i)
# print(max(as.Date(train$date)))
# filter test set to calculate pred for only 1 day at a time
tempTest <- test %>% filter(as.Date(date) == cutOff + i)
tempTest$pred <- predict(model, newdata = tempTest)
# test to check for correct test window
# print(max(as.Date(tempTest$date)))
# create design matrix
# [-2] drops response from formula
Designmat <- model.matrix(formula(model)[-2], tempTest)
# compute XVX′ to get the variance-covariance matrix of the predictions
# extract the diagonal of this matrix to get variances of predictions
predvar <- diag(Designmat %*% vcov(model) %*% t(Designmat))
#results7$SE <- sqrt(predvar)
tempTest$SE <- sqrt(predvar + model$sigma^2) # sigma is the estimated within-group error standard deviation
tempTest$lowerCI <- tempTest$pred - 1.96*tempTest$SE
tempTest$upperCI <- tempTest$pred + 1.96*tempTest$SE
tempTest %<>%
mutate(pred = exp(pred)
, lowerCI = exp(lowerCI)
, upperCI = exp(upperCI)
)
test %<>%
left_join(tempTest %>% select(city, date, pred, lowerCI, upperCI)
, by = c("date" = "date", "city" = "city"))
if(i > 1)
{
test %<>%
mutate(pred = coalesce(pred.x, pred.y)
, lowerCI = coalesce(lowerCI.x, lowerCI.y)
, upperCI = coalesce(upperCI.x, upperCI.y)
) %>%
select(-pred.x, -pred.y
, -lowerCI.x, -lowerCI.y
, -upperCI.x, -upperCI.y)
}
# bring forward predictions
test %<>%
mutate(casesTminus1.rate =  case_when(is.na(casesTminus1.rate) ~ lag(as.numeric(pred)), TRUE ~ casesTminus1.rate)
, casesTminus2.rate =  case_when(is.na(casesTminus2.rate) ~ lag(as.numeric(pred), 2), TRUE ~ casesTminus2.rate)
)
}
# pull all metrics into one dataframe called dailyMetrics
metrics <- test %>%
filter(as.Date(date) <= cutOff + 7) %>%
group_by(city) %>%
summarize(MAE = round(mean(abs(case.rate - pred)) , 2)
, MAPE = round(mean(abs(case.rate - pred)/case.rate) , 2)
, CP = round(sum(case.rate >= lowerCI & case.rate <= upperCI ) / n() , 2)
) %>%
left_join( test %>%
group_by(city) %>%
summarize(MAE = round(mean(abs(case.rate - pred)) , 2)
, MAPE = round(mean(abs(case.rate - pred)/case.rate) , 2)
, CP = round(sum(case.rate >= lowerCI & case.rate <= upperCI ) / n() , 2)
)
, by = "city"
, suffix = c("_7d", "_14d")
) %>%
rename_at(vars(-city), ~ paste0(modelName,.)) %>%
arrange(as.character(city))
dailyMetrics %<>%
left_join(metrics, by = "city")
testNov %<>%
left_join(test %>% select(city, date, pred, lowerCI, upperCI), by = c("city", "date") ) %>%
rename_at(vars(pred, lowerCI, upperCI), ~paste0(modelName, .))
modelName <- 'lmLogNov_'
train <- alldata.groupedR %>%
filter(as.Date(date) >= startDate & as.Date(date) <= (cutOff))
model <- lm(log(case.rate) ~ log(casesTminus1.rate) + log(casesTminus2.rate) + weekend,
data = train
)
summary(model)
test <- alldata.groupedR %>%
filter(as.Date(date) >= startDate
& as.Date(date) > cutOff
& as.Date(date) <= (cutOff + testRange)
) %>%
select(city, day031620, date, weekend, case.rate, casesTminus1.rate, casesTminus2.rate) %>%
mutate(
casesTminus1.rate = case_when( mod(as.numeric(as.Date(date) - cutOff), 7) == 1 ~ casesTminus1.rate
, TRUE ~ as.numeric(NA))
, casesTminus2.rate =
case_when( mod(as.numeric(as.Date(date) - cutOff), 7) %in% c(1,2) ~ casesTminus2.rate
, TRUE ~ as.numeric(NA))
)
for (i in 1:testRange)
{
if(i >1 & i %% 7 == 1) # update only when predicting on 8th, 15th, etc. days
{
train <- alldata.groupedR %>%
filter(as.Date(date) >= startDate & as.Date(date) <= (cutOff - 1 + i))
model <- update(model, data = train)
}
tempTest <- test %>% filter(as.Date(date) == cutOff + i)
pred <- predict(model, newdata = test[i,], interval = "prediction", level = 0.95) %>% as.data.frame()
tempTest$pred <- exp(pred$fit)
tempTest$lowerCI <- exp(pred$lwr)
tempTest$upperCI <- exp(pred$upr)
test %<>%
left_join(tempTest %>% select(city, date, pred, lowerCI, upperCI)
, by = c("date" = "date", "city" = "city"))
if(i > 1)
{
test %<>%
mutate(pred = coalesce(pred.x, pred.y)
, lowerCI = coalesce(lowerCI.x, lowerCI.y)
, upperCI = coalesce(upperCI.x, upperCI.y)
) %>%
select(-pred.x, -pred.y
, -lowerCI.x, -lowerCI.y
, -upperCI.x, -upperCI.y)
}
test %<>%
mutate(casesTminus1.rate =  case_when(is.na(casesTminus1.rate) ~ lag(as.numeric(pred)), TRUE ~ casesTminus1.rate)
, casesTminus2.rate =  case_when(is.na(casesTminus2.rate) ~ lag(as.numeric(pred), 2), TRUE ~ casesTminus2.rate)
)
}
metrics <- test %>%
filter(as.Date(date) <= cutOff + 7) %>%
group_by(city) %>%
summarize(MAE = round(mean(abs(case.rate - pred)) , 2)
, MAPE = round(mean(abs(case.rate - pred)/case.rate) , 2)
, CP = round(sum(case.rate >= lowerCI & case.rate <= upperCI ) / n() , 2)
) %>%
left_join( test %>%
group_by(city) %>%
summarize(MAE = round(mean(abs(case.rate - pred)) , 2)
, MAPE = round(mean(abs(case.rate - pred)/case.rate) , 2)
, CP = round(sum(case.rate >= lowerCI & case.rate <= upperCI ) / n() , 2)
)
, by = "city"
, suffix = c("_7d", "_14d")
) %>%
rename_at(vars(-city), ~ paste0(modelName,.)) %>%
arrange(as.character(city))
dailyMetrics %<>%
left_join(metrics, by = "city")
testNov %<>%
left_join(test %>% select(city, date, pred, lowerCI, upperCI), by = c("city", "date") ) %>%
rename_at(vars(pred, lowerCI, upperCI), ~paste0(modelName, .))
modelName = 'lmeLogWalkingNov_'
train <- alldata.groupedR %>%
filter(as.Date(date) >= startDate & as.Date(date) <= (cutOff))
model <- lme(fixed = log(case.rate) ~ log(casesTminus1.rate) + log(casesTminus2.rate) + weekend + walkingMinus7,
random = ~ log(casesTminus1.rate) + log(casesTminus2.rate) - 1 | city,
data = train
, control = lmeControl(maxIter = 1e8, opt='optim')
)
summary(model)
# test to hold all date data points up to testRange
test <- alldata.groupedR %>%
filter(as.Date(date) >= startDate
& as.Date(date) > cutOff
& as.Date(date) <= (cutOff + testRange)
) %>%
select(city, day031620, date, weekend, case.rate, casesTminus1.rate, casesTminus2.rate, walkingMinus7) %>%
mutate(
casesTminus1.rate = case_when( mod(as.numeric(as.Date(date) - cutOff), 7) == 1 ~ casesTminus1.rate
, TRUE ~ as.numeric(NA))
, casesTminus2.rate =
case_when( mod(as.numeric(as.Date(date) - cutOff), 7) %in% c(1,2) ~ casesTminus2.rate
, TRUE ~ as.numeric(NA))
)
# Predict one new observation at a time
# For each new test, refit the model with actual observed Y
for (i in 1:testRange)
{
if(i >1 & i %% 7 == 1) # update only when predicting on 8th, 15th, etc. days
{
train <- alldata.groupedR %>%
filter(as.Date(date) >= startDate & as.Date(date) <= (cutOff - 1 + i))
model <- update(model, data = train)
}
# test to check correct training window
# print(i)
# print(max(as.Date(train$date)))
# filter test set to calculate pred for only 1 day at a time
tempTest <- test %>% filter(as.Date(date) == cutOff + i)
tempTest$pred <- predict(model, newdata = tempTest)
# test to check for correct test window
# print(max(as.Date(tempTest$date)))
# create design matrix
# [-2] drops response from formula
Designmat <- model.matrix(formula(model)[-2], tempTest)
# compute XVX′ to get the variance-covariance matrix of the predictions
# extract the diagonal of this matrix to get variances of predictions
predvar <- diag(Designmat %*% vcov(model) %*% t(Designmat))
#results7$SE <- sqrt(predvar)
tempTest$SE <- sqrt(predvar + model$sigma^2) # sigma is the estimated within-group error standard deviation
tempTest$lowerCI <- tempTest$pred - 1.96*tempTest$SE
tempTest$upperCI <- tempTest$pred + 1.96*tempTest$SE
tempTest %<>%
mutate(pred = exp(pred)
, lowerCI = exp(lowerCI)
, upperCI = exp(upperCI)
)
test %<>%
left_join(tempTest %>% select(city, date, pred, lowerCI, upperCI)
, by = c("date" = "date", "city" = "city"))
if(i > 1)
{
test %<>%
mutate(pred = coalesce(pred.x, pred.y)
, lowerCI = coalesce(lowerCI.x, lowerCI.y)
, upperCI = coalesce(upperCI.x, upperCI.y)
) %>%
select(-pred.x, -pred.y
, -lowerCI.x, -lowerCI.y
, -upperCI.x, -upperCI.y)
}
# bring forward predictions
test %<>%
mutate(casesTminus1.rate =  case_when(is.na(casesTminus1.rate) ~ lag(as.numeric(pred)), TRUE ~ casesTminus1.rate)
, casesTminus2.rate =  case_when(is.na(casesTminus2.rate) ~ lag(as.numeric(pred), 2), TRUE ~ casesTminus2.rate)
)
}
# pull all metrics into one dataframe called dailyMetrics
metrics <- test %>%
filter(as.Date(date) <= cutOff + 7) %>%
group_by(city) %>%
summarize(MAE = round(mean(abs(case.rate - pred)) , 2)
, MAPE = round(mean(abs(case.rate - pred)/case.rate) , 2)
, CP = round(sum(case.rate >= lowerCI & case.rate <= upperCI ) / n() , 2)
) %>%
left_join( test %>%
group_by(city) %>%
summarize(MAE = round(mean(abs(case.rate - pred)) , 2)
, MAPE = round(mean(abs(case.rate - pred)/case.rate) , 2)
, CP = round(sum(case.rate >= lowerCI & case.rate <= upperCI ) / n() , 2)
)
, by = "city"
, suffix = c("_7d", "_14d")
) %>%
rename_at(vars(-city), ~ paste0(modelName,.)) %>%
arrange(as.character(city))
dailyMetrics %<>%
left_join(metrics, by = "city")
testNov %<>%
left_join(test %>% select(city, date, pred, lowerCI, upperCI), by = c("city", "date") ) %>%
rename_at(vars(pred, lowerCI, upperCI), ~paste0(modelName, .))
modelName <- 'lmLogWalkingNov_'
train <- alldata.groupedR %>%
filter(as.Date(date) >= startDate & as.Date(date) <= (cutOff))
model <- lm(log(case.rate) ~ log(casesTminus1.rate) + log(casesTminus2.rate) + weekend + walkingMinus7,
data = train
)
summary(model)
test <- alldata.groupedR %>%
filter(as.Date(date) >= startDate
& as.Date(date) > cutOff
& as.Date(date) <= (cutOff + testRange)
) %>%
select(city, day031620, date, weekend, case.rate, casesTminus1.rate, casesTminus2.rate, walkingMinus7) %>%
mutate(
casesTminus1.rate = case_when( mod(as.numeric(as.Date(date) - cutOff), 7) == 1 ~ casesTminus1.rate
, TRUE ~ as.numeric(NA))
, casesTminus2.rate =
case_when( mod(as.numeric(as.Date(date) - cutOff), 7) %in% c(1,2) ~ casesTminus2.rate
, TRUE ~ as.numeric(NA))
)
for (i in 1:testRange)
{
if(i >1 & i %% 7 == 1) # update only when predicting on 8th, 15th, etc. days
{
train <- alldata.groupedR %>%
filter(as.Date(date) >= startDate & as.Date(date) <= (cutOff - 1 + i))
model <- update(model, data = train)
}
tempTest <- test %>% filter(as.Date(date) == cutOff + i)
pred <- predict(model, newdata = test[i,], interval = "prediction", level = 0.95) %>% as.data.frame()
tempTest$pred <- exp(pred$fit)
tempTest$lowerCI <- exp(pred$lwr)
tempTest$upperCI <- exp(pred$upr)
test %<>%
left_join(tempTest %>% select(city, date, pred, lowerCI, upperCI)
, by = c("date" = "date", "city" = "city"))
if(i > 1)
{
test %<>%
mutate(pred = coalesce(pred.x, pred.y)
, lowerCI = coalesce(lowerCI.x, lowerCI.y)
, upperCI = coalesce(upperCI.x, upperCI.y)
) %>%
select(-pred.x, -pred.y
, -lowerCI.x, -lowerCI.y
, -upperCI.x, -upperCI.y)
}
test %<>%
mutate(casesTminus1.rate =  case_when(is.na(casesTminus1.rate) ~ lag(as.numeric(pred)), TRUE ~ casesTminus1.rate)
, casesTminus2.rate =  case_when(is.na(casesTminus2.rate) ~ lag(as.numeric(pred), 2), TRUE ~ casesTminus2.rate)
)
}
metrics <- test %>%
filter(as.Date(date) <= cutOff + 7) %>%
group_by(city) %>%
summarize(MAE = round(mean(abs(case.rate - pred)) , 2)
, MAPE = round(mean(abs(case.rate - pred)/case.rate) , 2)
, CP = round(sum(case.rate >= lowerCI & case.rate <= upperCI ) / n() , 2)
) %>%
left_join( test %>%
group_by(city) %>%
summarize(MAE = round(mean(abs(case.rate - pred)) , 2)
, MAPE = round(mean(abs(case.rate - pred)/case.rate) , 2)
, CP = round(sum(case.rate >= lowerCI & case.rate <= upperCI ) / n() , 2)
)
, by = "city"
, suffix = c("_7d", "_14d")
) %>%
rename_at(vars(-city), ~ paste0(modelName,.)) %>%
arrange(as.character(city))
dailyMetrics %<>%
left_join(metrics, by = "city")
testNov %<>%
left_join(test %>% select(city, date, pred, lowerCI, upperCI), by = c("city", "date") ) %>%
rename_at(vars(pred, lowerCI, upperCI), ~paste0(modelName, .))
write.csv(testNov
, file = '/Users/kentran/Documents/PhD/senMovement/socialMobilityCOVID/results/testNov.csv')
print(dailyMetrics %>% as.data.frame())
write.csv(dailyMetrics
, file = paste0('/Users/kentran/Documents/PhD/senMovement/socialMobilityCOVID/results'
, '/dailyMetrics.csv'))
View(testAug)
View(testNov)
